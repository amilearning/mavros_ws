# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavlink_ros/ServoOutput.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ServoOutput(genpy.Message):
  _md5sum = "2eb810d78f830a65534a5c7e8160201a"
  _type = "mavlink_ros/ServoOutput"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# Timestamp (microseconds since system boot)
uint32 time_usec

# Value of servo outputs 1-8, in microseconds
uint16 servo1_raw
uint16 servo2_raw
uint16 servo3_raw
uint16 servo4_raw
uint16 servo5_raw
uint16 servo6_raw
uint16 servo7_raw
uint16 servo8_raw

# Servo output port (set of 8 outputs = 1 port)
# Most MAVs will just use one, but this allows to encode more than 8 servos
uint8 port

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','time_usec','servo1_raw','servo2_raw','servo3_raw','servo4_raw','servo5_raw','servo6_raw','servo7_raw','servo8_raw','port']
  _slot_types = ['std_msgs/Header','uint32','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_usec,servo1_raw,servo2_raw,servo3_raw,servo4_raw,servo5_raw,servo6_raw,servo7_raw,servo8_raw,port

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ServoOutput, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_usec is None:
        self.time_usec = 0
      if self.servo1_raw is None:
        self.servo1_raw = 0
      if self.servo2_raw is None:
        self.servo2_raw = 0
      if self.servo3_raw is None:
        self.servo3_raw = 0
      if self.servo4_raw is None:
        self.servo4_raw = 0
      if self.servo5_raw is None:
        self.servo5_raw = 0
      if self.servo6_raw is None:
        self.servo6_raw = 0
      if self.servo7_raw is None:
        self.servo7_raw = 0
      if self.servo8_raw is None:
        self.servo8_raw = 0
      if self.port is None:
        self.port = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time_usec = 0
      self.servo1_raw = 0
      self.servo2_raw = 0
      self.servo3_raw = 0
      self.servo4_raw = 0
      self.servo5_raw = 0
      self.servo6_raw = 0
      self.servo7_raw = 0
      self.servo8_raw = 0
      self.port = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I8HB().pack(_x.time_usec, _x.servo1_raw, _x.servo2_raw, _x.servo3_raw, _x.servo4_raw, _x.servo5_raw, _x.servo6_raw, _x.servo7_raw, _x.servo8_raw, _x.port))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.time_usec, _x.servo1_raw, _x.servo2_raw, _x.servo3_raw, _x.servo4_raw, _x.servo5_raw, _x.servo6_raw, _x.servo7_raw, _x.servo8_raw, _x.port,) = _get_struct_I8HB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I8HB().pack(_x.time_usec, _x.servo1_raw, _x.servo2_raw, _x.servo3_raw, _x.servo4_raw, _x.servo5_raw, _x.servo6_raw, _x.servo7_raw, _x.servo8_raw, _x.port))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.time_usec, _x.servo1_raw, _x.servo2_raw, _x.servo3_raw, _x.servo4_raw, _x.servo5_raw, _x.servo6_raw, _x.servo7_raw, _x.servo8_raw, _x.port,) = _get_struct_I8HB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I8HB = None
def _get_struct_I8HB():
    global _struct_I8HB
    if _struct_I8HB is None:
        _struct_I8HB = struct.Struct("<I8HB")
    return _struct_I8HB
