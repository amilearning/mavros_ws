# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavlink_ros/AslctrlData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AslctrlData(genpy.Message):
  _md5sum = "ee2e3f826ba54a34d67b0579a4371876"
  _type = "mavlink_ros/AslctrlData"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float32 h
float32 hRef
float32 hRef_t
float32 PitchAngle
float32 PitchAngleRef
float32 q
float32 qRef
float32 uElev
float32 uThrot
float32 uThrot2
float32 aZ
float32 YawAngle
float32 YawAngleRef
float32 RollAngle
float32 RollAngleRef
float32 p
float32 pRef
float32 r
float32 rRef
float32 uAil
float32 uRud
uint8 aslctrl_mode

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','h','hRef','hRef_t','PitchAngle','PitchAngleRef','q','qRef','uElev','uThrot','uThrot2','aZ','YawAngle','YawAngleRef','RollAngle','RollAngleRef','p','pRef','r','rRef','uAil','uRud','aslctrl_mode']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,h,hRef,hRef_t,PitchAngle,PitchAngleRef,q,qRef,uElev,uThrot,uThrot2,aZ,YawAngle,YawAngleRef,RollAngle,RollAngleRef,p,pRef,r,rRef,uAil,uRud,aslctrl_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AslctrlData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.h is None:
        self.h = 0.
      if self.hRef is None:
        self.hRef = 0.
      if self.hRef_t is None:
        self.hRef_t = 0.
      if self.PitchAngle is None:
        self.PitchAngle = 0.
      if self.PitchAngleRef is None:
        self.PitchAngleRef = 0.
      if self.q is None:
        self.q = 0.
      if self.qRef is None:
        self.qRef = 0.
      if self.uElev is None:
        self.uElev = 0.
      if self.uThrot is None:
        self.uThrot = 0.
      if self.uThrot2 is None:
        self.uThrot2 = 0.
      if self.aZ is None:
        self.aZ = 0.
      if self.YawAngle is None:
        self.YawAngle = 0.
      if self.YawAngleRef is None:
        self.YawAngleRef = 0.
      if self.RollAngle is None:
        self.RollAngle = 0.
      if self.RollAngleRef is None:
        self.RollAngleRef = 0.
      if self.p is None:
        self.p = 0.
      if self.pRef is None:
        self.pRef = 0.
      if self.r is None:
        self.r = 0.
      if self.rRef is None:
        self.rRef = 0.
      if self.uAil is None:
        self.uAil = 0.
      if self.uRud is None:
        self.uRud = 0.
      if self.aslctrl_mode is None:
        self.aslctrl_mode = 0
    else:
      self.header = std_msgs.msg.Header()
      self.h = 0.
      self.hRef = 0.
      self.hRef_t = 0.
      self.PitchAngle = 0.
      self.PitchAngleRef = 0.
      self.q = 0.
      self.qRef = 0.
      self.uElev = 0.
      self.uThrot = 0.
      self.uThrot2 = 0.
      self.aZ = 0.
      self.YawAngle = 0.
      self.YawAngleRef = 0.
      self.RollAngle = 0.
      self.RollAngleRef = 0.
      self.p = 0.
      self.pRef = 0.
      self.r = 0.
      self.rRef = 0.
      self.uAil = 0.
      self.uRud = 0.
      self.aslctrl_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_21fB().pack(_x.h, _x.hRef, _x.hRef_t, _x.PitchAngle, _x.PitchAngleRef, _x.q, _x.qRef, _x.uElev, _x.uThrot, _x.uThrot2, _x.aZ, _x.YawAngle, _x.YawAngleRef, _x.RollAngle, _x.RollAngleRef, _x.p, _x.pRef, _x.r, _x.rRef, _x.uAil, _x.uRud, _x.aslctrl_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 85
      (_x.h, _x.hRef, _x.hRef_t, _x.PitchAngle, _x.PitchAngleRef, _x.q, _x.qRef, _x.uElev, _x.uThrot, _x.uThrot2, _x.aZ, _x.YawAngle, _x.YawAngleRef, _x.RollAngle, _x.RollAngleRef, _x.p, _x.pRef, _x.r, _x.rRef, _x.uAil, _x.uRud, _x.aslctrl_mode,) = _get_struct_21fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_21fB().pack(_x.h, _x.hRef, _x.hRef_t, _x.PitchAngle, _x.PitchAngleRef, _x.q, _x.qRef, _x.uElev, _x.uThrot, _x.uThrot2, _x.aZ, _x.YawAngle, _x.YawAngleRef, _x.RollAngle, _x.RollAngleRef, _x.p, _x.pRef, _x.r, _x.rRef, _x.uAil, _x.uRud, _x.aslctrl_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 85
      (_x.h, _x.hRef, _x.hRef_t, _x.PitchAngle, _x.PitchAngleRef, _x.q, _x.qRef, _x.uElev, _x.uThrot, _x.uThrot2, _x.aZ, _x.YawAngle, _x.YawAngleRef, _x.RollAngle, _x.RollAngleRef, _x.p, _x.pRef, _x.r, _x.rRef, _x.uAil, _x.uRud, _x.aslctrl_mode,) = _get_struct_21fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_21fB = None
def _get_struct_21fB():
    global _struct_21fB
    if _struct_21fB is None:
        _struct_21fB = struct.Struct("<21fB")
    return _struct_21fB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
