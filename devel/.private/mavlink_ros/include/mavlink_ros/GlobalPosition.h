// Generated by gencpp from file mavlink_ros/GlobalPosition.msg
// DO NOT EDIT!


#ifndef MAVLINK_ROS_MESSAGE_GLOBALPOSITION_H
#define MAVLINK_ROS_MESSAGE_GLOBALPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavlink_ros
{
template <class ContainerAllocator>
struct GlobalPosition_
{
  typedef GlobalPosition_<ContainerAllocator> Type;

  GlobalPosition_()
    : header()
    , time_boot_ms(0.0)
    , lat(0.0)
    , lon(0.0)
    , alt(0.0)
    , relative_alt(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , hdg(0.0)  {
    }
  GlobalPosition_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_boot_ms(0.0)
    , lat(0.0)
    , lon(0.0)
    , alt(0.0)
    , relative_alt(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , hdg(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _time_boot_ms_type;
  _time_boot_ms_type time_boot_ms;

   typedef float _lat_type;
  _lat_type lat;

   typedef float _lon_type;
  _lon_type lon;

   typedef float _alt_type;
  _alt_type alt;

   typedef float _relative_alt_type;
  _relative_alt_type relative_alt;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vz_type;
  _vz_type vz;

   typedef float _hdg_type;
  _hdg_type hdg;





  typedef boost::shared_ptr< ::mavlink_ros::GlobalPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_ros::GlobalPosition_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalPosition_

typedef ::mavlink_ros::GlobalPosition_<std::allocator<void> > GlobalPosition;

typedef boost::shared_ptr< ::mavlink_ros::GlobalPosition > GlobalPositionPtr;
typedef boost::shared_ptr< ::mavlink_ros::GlobalPosition const> GlobalPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_ros::GlobalPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_ros::GlobalPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_ros::GlobalPosition_<ContainerAllocator1> & lhs, const ::mavlink_ros::GlobalPosition_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time_boot_ms == rhs.time_boot_ms &&
    lhs.lat == rhs.lat &&
    lhs.lon == rhs.lon &&
    lhs.alt == rhs.alt &&
    lhs.relative_alt == rhs.relative_alt &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.hdg == rhs.hdg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_ros::GlobalPosition_<ContainerAllocator1> & lhs, const ::mavlink_ros::GlobalPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_ros::GlobalPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_ros::GlobalPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_ros::GlobalPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_ros::GlobalPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_ros::GlobalPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_ros::GlobalPosition_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_ros::GlobalPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b48a30cc259bbe57cb97426ddade79a3";
  }

  static const char* value(const ::mavlink_ros::GlobalPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb48a30cc259bbe57ULL;
  static const uint64_t static_value2 = 0xcb97426ddade79a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_ros::GlobalPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_ros/GlobalPosition";
  }

  static const char* value(const ::mavlink_ros::GlobalPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_ros::GlobalPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32 time_boot_ms # Timestamp (milliseconds since system boot)\n"
"float32 lat # Latitude, expressed as meters * 10^7\n"
"float32 lon # Longitude, expressed as meters * 10^7\n"
"float32 alt # Altitude, expressed as meters * 1000 (millimeters) above MSL\n"
"float32 relative_alt # Altitude above ground, expressed as meters * 1000 (millimeters)\n"
"float32 vx # Ground X speed (latitude), expressed as meters per second * 100\n"
"float32 vy # Ground Y speed (longitude), expressed as meters per second * 100\n"
"float32 vz # Ground Z speed (altitude), expressed as meters per second * 100\n"
"float32 hdg # Compass heading, expressed in degrees * 100\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavlink_ros::GlobalPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_ros::GlobalPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_boot_ms);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.alt);
      stream.next(m.relative_alt);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.hdg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_ros::GlobalPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_ros::GlobalPosition_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_boot_ms: ";
    Printer<float>::stream(s, indent + "  ", v.time_boot_ms);
    s << indent << "lat: ";
    Printer<float>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<float>::stream(s, indent + "  ", v.lon);
    s << indent << "alt: ";
    Printer<float>::stream(s, indent + "  ", v.alt);
    s << indent << "relative_alt: ";
    Printer<float>::stream(s, indent + "  ", v.relative_alt);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "hdg: ";
    Printer<float>::stream(s, indent + "  ", v.hdg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_ROS_MESSAGE_GLOBALPOSITION_H
