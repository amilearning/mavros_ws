// Generated by gencpp from file mavlink_ros/ServoOutput.msg
// DO NOT EDIT!


#ifndef MAVLINK_ROS_MESSAGE_SERVOOUTPUT_H
#define MAVLINK_ROS_MESSAGE_SERVOOUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavlink_ros
{
template <class ContainerAllocator>
struct ServoOutput_
{
  typedef ServoOutput_<ContainerAllocator> Type;

  ServoOutput_()
    : header()
    , time_usec(0)
    , servo1_raw(0)
    , servo2_raw(0)
    , servo3_raw(0)
    , servo4_raw(0)
    , servo5_raw(0)
    , servo6_raw(0)
    , servo7_raw(0)
    , servo8_raw(0)
    , port(0)  {
    }
  ServoOutput_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_usec(0)
    , servo1_raw(0)
    , servo2_raw(0)
    , servo3_raw(0)
    , servo4_raw(0)
    , servo5_raw(0)
    , servo6_raw(0)
    , servo7_raw(0)
    , servo8_raw(0)
    , port(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _time_usec_type;
  _time_usec_type time_usec;

   typedef uint16_t _servo1_raw_type;
  _servo1_raw_type servo1_raw;

   typedef uint16_t _servo2_raw_type;
  _servo2_raw_type servo2_raw;

   typedef uint16_t _servo3_raw_type;
  _servo3_raw_type servo3_raw;

   typedef uint16_t _servo4_raw_type;
  _servo4_raw_type servo4_raw;

   typedef uint16_t _servo5_raw_type;
  _servo5_raw_type servo5_raw;

   typedef uint16_t _servo6_raw_type;
  _servo6_raw_type servo6_raw;

   typedef uint16_t _servo7_raw_type;
  _servo7_raw_type servo7_raw;

   typedef uint16_t _servo8_raw_type;
  _servo8_raw_type servo8_raw;

   typedef uint8_t _port_type;
  _port_type port;





  typedef boost::shared_ptr< ::mavlink_ros::ServoOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_ros::ServoOutput_<ContainerAllocator> const> ConstPtr;

}; // struct ServoOutput_

typedef ::mavlink_ros::ServoOutput_<std::allocator<void> > ServoOutput;

typedef boost::shared_ptr< ::mavlink_ros::ServoOutput > ServoOutputPtr;
typedef boost::shared_ptr< ::mavlink_ros::ServoOutput const> ServoOutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_ros::ServoOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_ros::ServoOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_ros::ServoOutput_<ContainerAllocator1> & lhs, const ::mavlink_ros::ServoOutput_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.time_usec == rhs.time_usec &&
    lhs.servo1_raw == rhs.servo1_raw &&
    lhs.servo2_raw == rhs.servo2_raw &&
    lhs.servo3_raw == rhs.servo3_raw &&
    lhs.servo4_raw == rhs.servo4_raw &&
    lhs.servo5_raw == rhs.servo5_raw &&
    lhs.servo6_raw == rhs.servo6_raw &&
    lhs.servo7_raw == rhs.servo7_raw &&
    lhs.servo8_raw == rhs.servo8_raw &&
    lhs.port == rhs.port;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_ros::ServoOutput_<ContainerAllocator1> & lhs, const ::mavlink_ros::ServoOutput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_ros::ServoOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_ros::ServoOutput_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_ros::ServoOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_ros::ServoOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_ros::ServoOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_ros::ServoOutput_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_ros::ServoOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2eb810d78f830a65534a5c7e8160201a";
  }

  static const char* value(const ::mavlink_ros::ServoOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2eb810d78f830a65ULL;
  static const uint64_t static_value2 = 0x534a5c7e8160201aULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_ros::ServoOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_ros/ServoOutput";
  }

  static const char* value(const ::mavlink_ros::ServoOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_ros::ServoOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Timestamp (microseconds since system boot)\n"
"uint32 time_usec\n"
"\n"
"# Value of servo outputs 1-8, in microseconds\n"
"uint16 servo1_raw\n"
"uint16 servo2_raw\n"
"uint16 servo3_raw\n"
"uint16 servo4_raw\n"
"uint16 servo5_raw\n"
"uint16 servo6_raw\n"
"uint16 servo7_raw\n"
"uint16 servo8_raw\n"
"\n"
"# Servo output port (set of 8 outputs = 1 port)\n"
"# Most MAVs will just use one, but this allows to encode more than 8 servos\n"
"uint8 port\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavlink_ros::ServoOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_ros::ServoOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_usec);
      stream.next(m.servo1_raw);
      stream.next(m.servo2_raw);
      stream.next(m.servo3_raw);
      stream.next(m.servo4_raw);
      stream.next(m.servo5_raw);
      stream.next(m.servo6_raw);
      stream.next(m.servo7_raw);
      stream.next(m.servo8_raw);
      stream.next(m.port);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_ros::ServoOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_ros::ServoOutput_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_usec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_usec);
    s << indent << "servo1_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.servo1_raw);
    s << indent << "servo2_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.servo2_raw);
    s << indent << "servo3_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.servo3_raw);
    s << indent << "servo4_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.servo4_raw);
    s << indent << "servo5_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.servo5_raw);
    s << indent << "servo6_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.servo6_raw);
    s << indent << "servo7_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.servo7_raw);
    s << indent << "servo8_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.servo8_raw);
    s << indent << "port: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.port);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_ROS_MESSAGE_SERVOOUTPUT_H
