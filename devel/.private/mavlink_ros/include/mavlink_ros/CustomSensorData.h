// Generated by gencpp from file mavlink_ros/CustomSensorData.msg
// DO NOT EDIT!


#ifndef MAVLINK_ROS_MESSAGE_CUSTOMSENSORDATA_H
#define MAVLINK_ROS_MESSAGE_CUSTOMSENSORDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavlink_ros
{
template <class ContainerAllocator>
struct CustomSensorData_
{
  typedef CustomSensorData_<ContainerAllocator> Type;

  CustomSensorData_()
    : header()
    , dbaro_pres_pa(0.0)
    , dbaro_velo_ms(0.0)
    , amb_temp_celsius(0.0)
    , adc121_vspb_volt(0.0)
    , adc121_cspb_amp(0.0)
    , adc121_cs1_amp(0.0)
    , adc121_cs2_amp(0.0)
    , mppt1_volt(0.0)
    , mppt1_amp(0.0)
    , mppt2_volt(0.0)
    , mppt2_amp(0.0)
    , mppt3_volt(0.0)
    , mppt3_amp(0.0)
    , mppt1_pwm(0)
    , mppt2_pwm(0)
    , mppt3_pwm(0)
    , mppt1_status(0)
    , mppt2_status(0)
    , mppt3_status(0)  {
    }
  CustomSensorData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dbaro_pres_pa(0.0)
    , dbaro_velo_ms(0.0)
    , amb_temp_celsius(0.0)
    , adc121_vspb_volt(0.0)
    , adc121_cspb_amp(0.0)
    , adc121_cs1_amp(0.0)
    , adc121_cs2_amp(0.0)
    , mppt1_volt(0.0)
    , mppt1_amp(0.0)
    , mppt2_volt(0.0)
    , mppt2_amp(0.0)
    , mppt3_volt(0.0)
    , mppt3_amp(0.0)
    , mppt1_pwm(0)
    , mppt2_pwm(0)
    , mppt3_pwm(0)
    , mppt1_status(0)
    , mppt2_status(0)
    , mppt3_status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _dbaro_pres_pa_type;
  _dbaro_pres_pa_type dbaro_pres_pa;

   typedef float _dbaro_velo_ms_type;
  _dbaro_velo_ms_type dbaro_velo_ms;

   typedef float _amb_temp_celsius_type;
  _amb_temp_celsius_type amb_temp_celsius;

   typedef float _adc121_vspb_volt_type;
  _adc121_vspb_volt_type adc121_vspb_volt;

   typedef float _adc121_cspb_amp_type;
  _adc121_cspb_amp_type adc121_cspb_amp;

   typedef float _adc121_cs1_amp_type;
  _adc121_cs1_amp_type adc121_cs1_amp;

   typedef float _adc121_cs2_amp_type;
  _adc121_cs2_amp_type adc121_cs2_amp;

   typedef float _mppt1_volt_type;
  _mppt1_volt_type mppt1_volt;

   typedef float _mppt1_amp_type;
  _mppt1_amp_type mppt1_amp;

   typedef float _mppt2_volt_type;
  _mppt2_volt_type mppt2_volt;

   typedef float _mppt2_amp_type;
  _mppt2_amp_type mppt2_amp;

   typedef float _mppt3_volt_type;
  _mppt3_volt_type mppt3_volt;

   typedef float _mppt3_amp_type;
  _mppt3_amp_type mppt3_amp;

   typedef uint16_t _mppt1_pwm_type;
  _mppt1_pwm_type mppt1_pwm;

   typedef uint16_t _mppt2_pwm_type;
  _mppt2_pwm_type mppt2_pwm;

   typedef uint16_t _mppt3_pwm_type;
  _mppt3_pwm_type mppt3_pwm;

   typedef uint8_t _mppt1_status_type;
  _mppt1_status_type mppt1_status;

   typedef uint8_t _mppt2_status_type;
  _mppt2_status_type mppt2_status;

   typedef uint8_t _mppt3_status_type;
  _mppt3_status_type mppt3_status;





  typedef boost::shared_ptr< ::mavlink_ros::CustomSensorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_ros::CustomSensorData_<ContainerAllocator> const> ConstPtr;

}; // struct CustomSensorData_

typedef ::mavlink_ros::CustomSensorData_<std::allocator<void> > CustomSensorData;

typedef boost::shared_ptr< ::mavlink_ros::CustomSensorData > CustomSensorDataPtr;
typedef boost::shared_ptr< ::mavlink_ros::CustomSensorData const> CustomSensorDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_ros::CustomSensorData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_ros::CustomSensorData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_ros::CustomSensorData_<ContainerAllocator1> & lhs, const ::mavlink_ros::CustomSensorData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.dbaro_pres_pa == rhs.dbaro_pres_pa &&
    lhs.dbaro_velo_ms == rhs.dbaro_velo_ms &&
    lhs.amb_temp_celsius == rhs.amb_temp_celsius &&
    lhs.adc121_vspb_volt == rhs.adc121_vspb_volt &&
    lhs.adc121_cspb_amp == rhs.adc121_cspb_amp &&
    lhs.adc121_cs1_amp == rhs.adc121_cs1_amp &&
    lhs.adc121_cs2_amp == rhs.adc121_cs2_amp &&
    lhs.mppt1_volt == rhs.mppt1_volt &&
    lhs.mppt1_amp == rhs.mppt1_amp &&
    lhs.mppt2_volt == rhs.mppt2_volt &&
    lhs.mppt2_amp == rhs.mppt2_amp &&
    lhs.mppt3_volt == rhs.mppt3_volt &&
    lhs.mppt3_amp == rhs.mppt3_amp &&
    lhs.mppt1_pwm == rhs.mppt1_pwm &&
    lhs.mppt2_pwm == rhs.mppt2_pwm &&
    lhs.mppt3_pwm == rhs.mppt3_pwm &&
    lhs.mppt1_status == rhs.mppt1_status &&
    lhs.mppt2_status == rhs.mppt2_status &&
    lhs.mppt3_status == rhs.mppt3_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_ros::CustomSensorData_<ContainerAllocator1> & lhs, const ::mavlink_ros::CustomSensorData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_ros::CustomSensorData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_ros::CustomSensorData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_ros::CustomSensorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_ros::CustomSensorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_ros::CustomSensorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_ros::CustomSensorData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_ros::CustomSensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e73fe8085cf19381bc9f3fcc82bcf58";
  }

  static const char* value(const ::mavlink_ros::CustomSensorData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e73fe8085cf1938ULL;
  static const uint64_t static_value2 = 0x1bc9f3fcc82bcf58ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_ros::CustomSensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_ros/CustomSensorData";
  }

  static const char* value(const ::mavlink_ros::CustomSensorData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_ros::CustomSensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Differential pressure, already temperature-compensated\n"
"float32 dbaro_pres_pa\n"
"\n"
"# Velocity calculation from differential pressure sensor in m/sec\n"
"float32 dbaro_velo_ms\n"
"\n"
"# Ambient temperature in degrees celsius\n"
"float32 amb_temp_celsius\n"
"\n"
"# Power board voltage sensor reading in volts\n"
"float32 adc121_vspb_volt\n"
"\n"
"# Power board current sensor reading in amps\n"
"float32 adc121_cspb_amp\n"
"\n"
"# Board current sensor 1 reading in amps\n"
"float32 adc121_cs1_amp\n"
"\n"
"# Board current sensor 2 reading in amps\n"
"float32 adc121_cs2_amp\n"
"\n"
"# MPPT1 voltage + current\n"
"float32 mppt1_volt\n"
"float32 mppt1_amp \n"
"\n"
"# MPPT2 voltage + current\n"
"float32 mppt2_volt \n"
"float32 mppt2_amp\n"
"\n"
"# MPPT3 voltage + current\n"
"float32 mppt3_volt\n"
"float32 mppt3_amp\n"
"\n"
"# MPPT1-3 pwm\n"
"uint16 mppt1_pwm\n"
"uint16 mppt2_pwm\n"
"uint16 mppt3_pwm\n"
"\n"
"# MPPT1-3 status\n"
"uint8 mppt1_status\n"
"uint8 mppt2_status\n"
"uint8 mppt3_status\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavlink_ros::CustomSensorData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_ros::CustomSensorData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dbaro_pres_pa);
      stream.next(m.dbaro_velo_ms);
      stream.next(m.amb_temp_celsius);
      stream.next(m.adc121_vspb_volt);
      stream.next(m.adc121_cspb_amp);
      stream.next(m.adc121_cs1_amp);
      stream.next(m.adc121_cs2_amp);
      stream.next(m.mppt1_volt);
      stream.next(m.mppt1_amp);
      stream.next(m.mppt2_volt);
      stream.next(m.mppt2_amp);
      stream.next(m.mppt3_volt);
      stream.next(m.mppt3_amp);
      stream.next(m.mppt1_pwm);
      stream.next(m.mppt2_pwm);
      stream.next(m.mppt3_pwm);
      stream.next(m.mppt1_status);
      stream.next(m.mppt2_status);
      stream.next(m.mppt3_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomSensorData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_ros::CustomSensorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_ros::CustomSensorData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dbaro_pres_pa: ";
    Printer<float>::stream(s, indent + "  ", v.dbaro_pres_pa);
    s << indent << "dbaro_velo_ms: ";
    Printer<float>::stream(s, indent + "  ", v.dbaro_velo_ms);
    s << indent << "amb_temp_celsius: ";
    Printer<float>::stream(s, indent + "  ", v.amb_temp_celsius);
    s << indent << "adc121_vspb_volt: ";
    Printer<float>::stream(s, indent + "  ", v.adc121_vspb_volt);
    s << indent << "adc121_cspb_amp: ";
    Printer<float>::stream(s, indent + "  ", v.adc121_cspb_amp);
    s << indent << "adc121_cs1_amp: ";
    Printer<float>::stream(s, indent + "  ", v.adc121_cs1_amp);
    s << indent << "adc121_cs2_amp: ";
    Printer<float>::stream(s, indent + "  ", v.adc121_cs2_amp);
    s << indent << "mppt1_volt: ";
    Printer<float>::stream(s, indent + "  ", v.mppt1_volt);
    s << indent << "mppt1_amp: ";
    Printer<float>::stream(s, indent + "  ", v.mppt1_amp);
    s << indent << "mppt2_volt: ";
    Printer<float>::stream(s, indent + "  ", v.mppt2_volt);
    s << indent << "mppt2_amp: ";
    Printer<float>::stream(s, indent + "  ", v.mppt2_amp);
    s << indent << "mppt3_volt: ";
    Printer<float>::stream(s, indent + "  ", v.mppt3_volt);
    s << indent << "mppt3_amp: ";
    Printer<float>::stream(s, indent + "  ", v.mppt3_amp);
    s << indent << "mppt1_pwm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mppt1_pwm);
    s << indent << "mppt2_pwm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mppt2_pwm);
    s << indent << "mppt3_pwm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mppt3_pwm);
    s << indent << "mppt1_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mppt1_status);
    s << indent << "mppt2_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mppt2_status);
    s << indent << "mppt3_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mppt3_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_ROS_MESSAGE_CUSTOMSENSORDATA_H
