// Generated by gencpp from file mavlink_ros/AslctrlDebug.msg
// DO NOT EDIT!


#ifndef MAVLINK_ROS_MESSAGE_ASLCTRLDEBUG_H
#define MAVLINK_ROS_MESSAGE_ASLCTRLDEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavlink_ros
{
template <class ContainerAllocator>
struct AslctrlDebug_
{
  typedef AslctrlDebug_<ContainerAllocator> Type;

  AslctrlDebug_()
    : header()
    , i32_1(0)
    , f_1(0.0)
    , f_2(0.0)
    , f_3(0.0)
    , f_4(0.0)
    , f_5(0.0)
    , f_6(0.0)
    , f_7(0.0)
    , f_8(0.0)
    , i8_1(0)
    , i8_2(0)  {
    }
  AslctrlDebug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , i32_1(0)
    , f_1(0.0)
    , f_2(0.0)
    , f_3(0.0)
    , f_4(0.0)
    , f_5(0.0)
    , f_6(0.0)
    , f_7(0.0)
    , f_8(0.0)
    , i8_1(0)
    , i8_2(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _i32_1_type;
  _i32_1_type i32_1;

   typedef float _f_1_type;
  _f_1_type f_1;

   typedef float _f_2_type;
  _f_2_type f_2;

   typedef float _f_3_type;
  _f_3_type f_3;

   typedef float _f_4_type;
  _f_4_type f_4;

   typedef float _f_5_type;
  _f_5_type f_5;

   typedef float _f_6_type;
  _f_6_type f_6;

   typedef float _f_7_type;
  _f_7_type f_7;

   typedef float _f_8_type;
  _f_8_type f_8;

   typedef uint8_t _i8_1_type;
  _i8_1_type i8_1;

   typedef uint8_t _i8_2_type;
  _i8_2_type i8_2;





  typedef boost::shared_ptr< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> const> ConstPtr;

}; // struct AslctrlDebug_

typedef ::mavlink_ros::AslctrlDebug_<std::allocator<void> > AslctrlDebug;

typedef boost::shared_ptr< ::mavlink_ros::AslctrlDebug > AslctrlDebugPtr;
typedef boost::shared_ptr< ::mavlink_ros::AslctrlDebug const> AslctrlDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_ros::AslctrlDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavlink_ros::AslctrlDebug_<ContainerAllocator1> & lhs, const ::mavlink_ros::AslctrlDebug_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.i32_1 == rhs.i32_1 &&
    lhs.f_1 == rhs.f_1 &&
    lhs.f_2 == rhs.f_2 &&
    lhs.f_3 == rhs.f_3 &&
    lhs.f_4 == rhs.f_4 &&
    lhs.f_5 == rhs.f_5 &&
    lhs.f_6 == rhs.f_6 &&
    lhs.f_7 == rhs.f_7 &&
    lhs.f_8 == rhs.f_8 &&
    lhs.i8_1 == rhs.i8_1 &&
    lhs.i8_2 == rhs.i8_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavlink_ros::AslctrlDebug_<ContainerAllocator1> & lhs, const ::mavlink_ros::AslctrlDebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavlink_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ed1afeedae1f1202f26cc3aeb9e8381";
  }

  static const char* value(const ::mavlink_ros::AslctrlDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ed1afeedae1f120ULL;
  static const uint64_t static_value2 = 0x2f26cc3aeb9e8381ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_ros/AslctrlDebug";
  }

  static const char* value(const ::mavlink_ros::AslctrlDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Debug data\n"
"uint32 i32_1\n"
"float32 f_1\n"
"float32 f_2\n"
"float32 f_3\n"
"float32 f_4\n"
"float32 f_5\n"
"float32 f_6\n"
"float32 f_7\n"
"float32 f_8\n"
"uint8 i8_1\n"
"uint8 i8_2\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavlink_ros::AslctrlDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.i32_1);
      stream.next(m.f_1);
      stream.next(m.f_2);
      stream.next(m.f_3);
      stream.next(m.f_4);
      stream.next(m.f_5);
      stream.next(m.f_6);
      stream.next(m.f_7);
      stream.next(m.f_8);
      stream.next(m.i8_1);
      stream.next(m.i8_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AslctrlDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_ros::AslctrlDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_ros::AslctrlDebug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "i32_1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.i32_1);
    s << indent << "f_1: ";
    Printer<float>::stream(s, indent + "  ", v.f_1);
    s << indent << "f_2: ";
    Printer<float>::stream(s, indent + "  ", v.f_2);
    s << indent << "f_3: ";
    Printer<float>::stream(s, indent + "  ", v.f_3);
    s << indent << "f_4: ";
    Printer<float>::stream(s, indent + "  ", v.f_4);
    s << indent << "f_5: ";
    Printer<float>::stream(s, indent + "  ", v.f_5);
    s << indent << "f_6: ";
    Printer<float>::stream(s, indent + "  ", v.f_6);
    s << indent << "f_7: ";
    Printer<float>::stream(s, indent + "  ", v.f_7);
    s << indent << "f_8: ";
    Printer<float>::stream(s, indent + "  ", v.f_8);
    s << indent << "i8_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.i8_1);
    s << indent << "i8_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.i8_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_ROS_MESSAGE_ASLCTRLDEBUG_H
