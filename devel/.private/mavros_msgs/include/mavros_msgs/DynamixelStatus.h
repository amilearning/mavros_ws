// Generated by gencpp from file mavros_msgs/DynamixelStatus.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_DYNAMIXELSTATUS_H
#define MAVROS_MSGS_MESSAGE_DYNAMIXELSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct DynamixelStatus_
{
  typedef DynamixelStatus_<ContainerAllocator> Type;

  DynamixelStatus_()
    : header()
    , msg_arrival_time()
    , measured_angles()
    , cmd_angles()
    , noutputs(0)  {
      measured_angles.assign(0.0);

      cmd_angles.assign(0.0);
  }
  DynamixelStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , msg_arrival_time()
    , measured_angles()
    , cmd_angles()
    , noutputs(0)  {
  (void)_alloc;
      measured_angles.assign(0.0);

      cmd_angles.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _msg_arrival_time_type;
  _msg_arrival_time_type msg_arrival_time;

   typedef boost::array<float, 6>  _measured_angles_type;
  _measured_angles_type measured_angles;

   typedef boost::array<float, 6>  _cmd_angles_type;
  _cmd_angles_type cmd_angles;

   typedef uint8_t _noutputs_type;
  _noutputs_type noutputs;





  typedef boost::shared_ptr< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> const> ConstPtr;

}; // struct DynamixelStatus_

typedef ::mavros_msgs::DynamixelStatus_<std::allocator<void> > DynamixelStatus;

typedef boost::shared_ptr< ::mavros_msgs::DynamixelStatus > DynamixelStatusPtr;
typedef boost::shared_ptr< ::mavros_msgs::DynamixelStatus const> DynamixelStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::DynamixelStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::DynamixelStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::DynamixelStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.msg_arrival_time == rhs.msg_arrival_time &&
    lhs.measured_angles == rhs.measured_angles &&
    lhs.cmd_angles == rhs.cmd_angles &&
    lhs.noutputs == rhs.noutputs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::DynamixelStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::DynamixelStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbe2bc41c13e9678b5df3301db3e4c57";
  }

  static const char* value(const ::mavros_msgs::DynamixelStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbe2bc41c13e9678ULL;
  static const uint64_t static_value2 = 0xb5df3301db3e4c57ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/DynamixelStatus";
  }

  static const char* value(const ::mavros_msgs::DynamixelStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Tilt angles cmd and measurements for omav\n"
"#\n"
"\n"
"std_msgs/Header header\n"
"time msg_arrival_time\n"
"float32[6] measured_angles #[rad]\n"
"float32[6] cmd_angles #[rad]\n"
"uint8 noutputs\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::DynamixelStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.msg_arrival_time);
      stream.next(m.measured_angles);
      stream.next(m.cmd_angles);
      stream.next(m.noutputs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DynamixelStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::DynamixelStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::DynamixelStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "msg_arrival_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.msg_arrival_time);
    s << indent << "measured_angles[]" << std::endl;
    for (size_t i = 0; i < v.measured_angles.size(); ++i)
    {
      s << indent << "  measured_angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.measured_angles[i]);
    }
    s << indent << "cmd_angles[]" << std::endl;
    for (size_t i = 0; i < v.cmd_angles.size(); ++i)
    {
      s << indent << "  cmd_angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cmd_angles[i]);
    }
    s << indent << "noutputs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.noutputs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_DYNAMIXELSTATUS_H
